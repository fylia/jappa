package org.fylia.jappa.dao.impl;
// Generated by org.fylia.jappa.JappaProcessor

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.fylia.jappa.model.Article;
import org.fylia.jappa.core.AbstractSpringJdbcDao;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;

/**
 * Generated Class with utilities for use with JdbcTemplate and org.fylia.model.Article
 */
public class ArticleJdbcTemplate extends AbstractSpringJdbcDao { 
	public static final List<String> DETAIL_COLUMN_LIST = Arrays.asList("code", "description", "cataloguePrice", "inventoryItem", "supplierId");
	public static final List<String> ID_COLUMN_LIST = Arrays.asList("idArticle");

    public static final String DETAIL_COLUMNS = DETAIL_COLUMN_LIST.stream().collect(Collectors.joining(", "));
    public static final String ID_COLUMNS = ID_COLUMN_LIST.stream().collect(Collectors.joining(", "));
    public static final String ALL_COLUMNS = ID_COLUMNS+", "+DETAIL_COLUMNS;

    public static final String DETAIL_PARAMS = "?, ?, ?, ?, ?";
    public static final String ID_PARAMS = "?";
    
    public static final ArticleRowMapper MAPPER = new ArticleRowMapper();

    public Article merge(Article article) {
        if (article.getId()==null) {
            final GeneratedKeyHolder holder = new GeneratedKeyHolder();
            getJdbcTemplate().update(new SimplePreparedStatementCreator(
                    "insert into article(" + ALL_COLUMNS + ") values (default, " + DETAIL_PARAMS+ ")",
                prepareStatement -> {
                    int col = 0;
                    prepareStatement.setString(++col, article.getCode());
                    prepareStatement.setString(++col, article.getDescription());
                    prepareStatement.setBigDecimal(++col, article.getCataloguePrice());
                    prepareStatement.setBoolean(++col, article.isInventoryItem());
                    prepareStatement.setObject(++col, article.getSupplier()==null?null:article.getSupplier().getId());
                }), holder);
            article.setId(holder.getKey().intValue());
        } else {
            getJdbcTemplate().update("UPDATE article SET (" + DETAIL_COLUMNS + ") = (" + DETAIL_PARAMS + ") WHERE idArticle = ?", new Object [] {
                article.getCode(),
                article.getDescription(),
                article.getCataloguePrice(),
                article.isInventoryItem(),
                article.getSupplier()==null?null:article.getSupplier().getId(),
        		article.getId()
            });
        }
        return article;
    }

    public Article getById(java.lang.Integer id) {
        try {
            return getJdbcTemplate().queryForObject(
                "select " + ALL_COLUMNS + " from article where idArticle = ? ", new Object[] {id},
                MAPPER);
        } catch (EmptyResultDataAccessException e) {
            return null;
        }
    }

    public List<Article> findAll() {
        return getJdbcTemplate().query(
                "select " + ALL_COLUMNS + " from article", new Object[] {},
                MAPPER);
    }

    public static final class ArticleRowMapper implements RowMapper<Article> {
        private final String columnPrefix;
        private final String idColName;
        private final String codeColName;
        private final String descriptionColName;
        private final String cataloguePriceColName;
        private final String inventoryItemColName;
        private final String supplierColName;

        public ArticleRowMapper() {
            this("");
        }

        public ArticleRowMapper(String columnPrefix) {
            this.columnPrefix = columnPrefix;
            idColName = columnPrefix + "idArticle";
            codeColName = columnPrefix + "code";
            descriptionColName = columnPrefix + "description";
            cataloguePriceColName = columnPrefix + "cataloguePrice";
            inventoryItemColName = columnPrefix + "inventoryItem";
            supplierColName = columnPrefix + "supplierId";
        }

        @Override
        public Article mapRow(ResultSet rs, int rowNum) throws SQLException {
             final Article o = new Article();

             o.setId((java.lang.Integer)rs.getObject(idColName));
             o.setCode(rs.getString(codeColName));
             o.setDescription(rs.getString(descriptionColName));
             o.setCataloguePrice(rs.getBigDecimal(cataloguePriceColName));
             o.setInventoryItem(rs.getBoolean(inventoryItemColName));
             java.lang.Integer supplierId = (java.lang.Integer)rs.getObject(supplierColName);
             if (supplierId==null) {
                 o.setSupplier(null);
             } else {
                 o.setSupplier(new org.fylia.jappa.model.Supplier());
                 o.getSupplier().setId(supplierId);
             }
             return o;
        }

        public String getColumnPrefix() {
            return columnPrefix;
        }
    }
}
