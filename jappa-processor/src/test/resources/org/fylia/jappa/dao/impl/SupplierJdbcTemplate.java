package org.fylia.jappa.dao.impl;
// Generated by org.fylia.jappa.JappaProcessor

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import org.fylia.jappa.model.Supplier;
import org.fylia.jappa.core.AbstractSpringJdbcDao;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;

/**
 * Generated Class with utilities for use with JdbcTemplate and org.fylia.model.Supplier
 */
public class SupplierJdbcTemplate extends AbstractSpringJdbcDao { 

    public static final List<String> DETAIL_COLUMN_LIST = Arrays.asList("supplier", "name", "fc", "depositDeadline", "np");
    public static final List<String> ID_COLUMN_LIST = Arrays.asList("idSuppliers");
    public static final String DETAIL_COLUMNS = DETAIL_COLUMN_LIST.stream().collect(Collectors.joining(", "));
    public static final String ID_COLUMNS = ID_COLUMN_LIST.stream().collect(Collectors.joining(", "));
    public static final String ALL_COLUMNS = ID_COLUMNS + ", " + DETAIL_COLUMNS;
    public static final String DETAIL_PARAMS = "?, ?, ?, ?, ?";
    public static final String ID_PARAMS = "?";

    public static final SupplierRowMapper MAPPER = new SupplierRowMapper();

    public Supplier merge(Supplier supplier) {
        if (supplier.getId()==null) {
            final GeneratedKeyHolder holder = new GeneratedKeyHolder();
            getJdbcTemplate().update(new SimplePreparedStatementCreator(
                    "insert into suppliers(" + ALL_COLUMNS + ") values (default, " + DETAIL_PARAMS+ ")",
                prepareStatement -> {
                    int col = 0;
                    prepareStatement.setString(++col, supplier.getSupplier());
                    prepareStatement.setString(++col, supplier.getName());
                    prepareStatement.setBoolean(++col, supplier.isForeignCountry());
                    prepareStatement.setObject(++col, supplier.getDepositDeadline());
                    prepareStatement.setBigDecimal(++col, supplier.getNettoPrice());
                }), holder);
            supplier.setId(holder.getKey().intValue());
        } else {
            getJdbcTemplate().update("UPDATE suppliers SET (" + DETAIL_COLUMNS + ") = (" + DETAIL_PARAMS + ") WHERE idSuppliers = ?", new Object [] {
                supplier.getSupplier(),
                supplier.getName(),
                supplier.isForeignCountry(),
                supplier.getDepositDeadline(),
                supplier.getNettoPrice(),
                supplier.getId()
            });
        }
        return supplier;
    }

    public Supplier getById(java.lang.Integer id) {
        try {
            return getJdbcTemplate().queryForObject(
                "select " + ALL_COLUMNS + " from suppliers where idSuppliers = ? ", new Object[] {id},
                MAPPER);
        } catch (EmptyResultDataAccessException e) {
            return null;
        }
    }

    public List<Supplier> findAll() {
        return getJdbcTemplate().query(
                "select " + ALL_COLUMNS + " from suppliers", new Object[] {},
                MAPPER);
    }

    public static final class SupplierRowMapper implements RowMapper<Supplier> {
        private final String columnPrefix;
        private final String idColName;
        private final String supplierColName;
        private final String nameColName;
        private final String foreignCountryColName;
        private final String depositDeadlineColName;
        private final String nettoPriceColName;

        public SupplierRowMapper() {
            this("");
        }

        public SupplierRowMapper(String columnPrefix) {
            this.columnPrefix = columnPrefix;
            idColName = columnPrefix + "idSuppliers";
            supplierColName = columnPrefix + "supplier";
            nameColName = columnPrefix + "name";
            foreignCountryColName = columnPrefix + "fc";
            depositDeadlineColName = columnPrefix + "depositDeadline";
            nettoPriceColName = columnPrefix + "np";
        }

        @Override
        public Supplier mapRow(ResultSet rs, int rowNum) throws SQLException {
             final Supplier o = new Supplier();

             o.setId((java.lang.Integer)rs.getObject(idColName));
             o.setSupplier(rs.getString(supplierColName));
             o.setName(rs.getString(nameColName));
             o.setForeignCountry(rs.getBoolean(foreignCountryColName));
             o.setDepositDeadline((java.lang.Integer)rs.getObject(depositDeadlineColName));
             o.setNettoPrice(rs.getBigDecimal(nettoPriceColName));
             return o;
        }

        public String getColumnPrefix() {
            return columnPrefix;
        }
    }
}
