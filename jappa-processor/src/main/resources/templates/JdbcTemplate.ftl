<#macro appendGetterCall objectParam propertyDetails><#compress>
<#if (propertyDetails.type.kind.name() == "DECLARED") && entities[propertyDetails.type.toString()]??>
    <#assign referenceIdDetails = entities[propertyDetails.type.toString()].idDetails>
    ${objectParam}.${propertyDetails.getterName}()==null?null:${objectParam}.${propertyDetails.getterName}().${referenceIdDetails.getterName}()
<#else>
    ${objectParam}.${propertyDetails.getterName}()
</#if>
</#compress></#macro>

package ${options.destinationPackage};
// Generated by org.fylia.jappa.JappaProcessor

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import ${type.name};
import org.fylia.jappa.core.AbstractSpringJdbcDao;
import org.fylia.jappa.core.PropertyDetail;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;

/**
 * Generated Class with utilities for use with JdbcTemplate and ${type.packageName}.${type.name}
 */
public class ${type.simpleName}JdbcTemplate extends AbstractSpringJdbcDao { 
    public static final String TABLENAME = "${type.tableName}";
    public static final List<PropertyDetail> PROPERTIES_LIST = Arrays.asList(
<#list type.properties?values as pd>
            new PropertyDetail("${pd.name}","${pd.columnName}", ${pd.type}.class, ${pd.id?c}, 
                <#if pd.generationType??>javax.persistence.GenerationType.${pd.generationType}<#else>null</#if>, 
                <#if pd.generator??>"${pd.generator}"<#else>null</#if>, 
                ${pd.embedded?c}, ${pd.nested?c}, ${pd.unique?c}, ${pd.nullable?c}, ${pd.insertable?c}, ${pd.updatable?c}, "${pd.columnDefinition}", "${pd.table}", ${pd.length?c}, ${pd.precision?c}, ${pd.scale?c}, "${pd.referencedColumnName}", null, 
                <#if pd.propertyType??>PropertyDetail.PropertyType.${pd.propertyType}<#else>null</#if>)<#sep>,
</#list>);
            

    public static final List<PropertyDetail> DETAIL_PROPERTIES_LIST = PROPERTIES_LIST.stream().filter(p->!p.isId()).collect(Collectors.toList());
    public static final List<PropertyDetail> ID_PROPERTIES_LIST = PROPERTIES_LIST.stream().filter(p->p.isId() && (!p.isEmbedded() || p.isNested())).collect(Collectors.toList());
    public static final List<String> DETAIL_COLUMN_LIST = DETAIL_PROPERTIES_LIST.stream().map(PropertyDetail::getColumnName).collect(Collectors.toList());
    public static final List<String> ID_COLUMN_LIST = ID_PROPERTIES_LIST.stream().map(PropertyDetail::getColumnName).collect(Collectors.toList());
    public static final String DETAIL_COLUMNS = DETAIL_COLUMN_LIST.stream().collect(Collectors.joining(", "));
    public static final String ID_COLUMNS = ID_COLUMN_LIST.stream().collect(Collectors.joining(", "));
    public static final String ALL_COLUMNS = ID_COLUMNS + ", " + DETAIL_COLUMNS;
    public static final String ID_COLUMNS_QUERY = ID_COLUMN_LIST.stream().map(col-> col + " = ? ").collect(Collectors.joining(" AND "));

    public static final String DETAIL_PARAMS = IntStream.range(0, DETAIL_PROPERTIES_LIST.size()).mapToObj(i->"?").collect(Collectors.joining(", "));
    public static final String ID_PARAMS = IntStream.range(0, ID_PROPERTIES_LIST.size()).mapToObj(i->"?").collect(Collectors.joining(", "));

    public static final ${type.simpleName}RowMapper MAPPER = new ${type.simpleName}RowMapper();
<#list type.properties?values as pd><#if pd.propertyType.name() == "MANY_TO_ONE">
    public static final ${pd.referenceType.simpleName}JdbcTemplate.${pd.referenceType.simpleName}IdRowMapper ${pd.referenceType.simpleName?upper_case}_ID_MAPPER = new ${pd.referenceType.simpleName}JdbcTemplate.${pd.referenceType.simpleName}IdRowMapper("${pd.columnName}");
</#if></#list>

    public ${type.simpleName} insert(${type.simpleName} ${type.simpleName?lower_case}) {
        if (ID_PROPERTIES_LIST.size()==1 && ID_PROPERTIES_LIST.get(0).getGenerationType()!=null) {
            final GeneratedKeyHolder holder = new GeneratedKeyHolder();
            getJdbcTemplate().update(new SimplePreparedStatementCreator(
                    "insert into "+TABLENAME+"(" + ALL_COLUMNS + ") values (default, " + DETAIL_PARAMS+ ")",
                prepareStatement -> {
                    for (int col = 0; col<DETAIL_PROPERTIES_LIST.size(); col++) {
                        prepareStatement.setObject(col+1, getColumnValue(${type.simpleName?lower_case}, DETAIL_PROPERTIES_LIST.get(col).getName()));
                    }
                }), holder);
            List<Object> idValues = new ArrayList<>(holder.getKeys().values());
            setColumnValue(${type.simpleName?lower_case}, ID_PROPERTIES_LIST.get(0).getName(), idValues.get(0));
        } else {
            getJdbcTemplate().update("insert into "+TABLENAME+" (" + ALL_COLUMNS + ") values (" + ID_PARAMS + ", " + DETAIL_PARAMS + ")",
                prepareStatement -> {
                    for (int col = 0; col<ID_PROPERTIES_LIST.size(); col++) {
                        prepareStatement.setObject(DETAIL_PROPERTIES_LIST.size()+col+1, getColumnValue(${type.simpleName?lower_case}, ID_PROPERTIES_LIST.get(col).getName()));
                    }
                    for (int col = 0; col<DETAIL_PROPERTIES_LIST.size(); col++) {
                        prepareStatement.setObject(col+1, getColumnValue(${type.simpleName?lower_case}, DETAIL_PROPERTIES_LIST.get(col).getName()));
                    }
                }
            );
        }
        return ${type.simpleName?lower_case};
    }


    public ${type.simpleName} update(${type.simpleName} ${type.simpleName?lower_case}) {
        getJdbcTemplate().update("UPDATE "+TABLENAME+" SET (" + DETAIL_COLUMNS + ") = (" + DETAIL_PARAMS + ") WHERE ("+ID_COLUMNS_QUERY+")",
            prepareStatement -> {
                for (int col = 0; col<DETAIL_PROPERTIES_LIST.size(); col++) {
                    prepareStatement.setObject(col+1, getColumnValue(${type.simpleName?lower_case}, DETAIL_PROPERTIES_LIST.get(col).getName()));
                }
                for (int col = 0; col<ID_PROPERTIES_LIST.size(); col++) {
                    prepareStatement.setObject(DETAIL_PROPERTIES_LIST.size()+col+1, getColumnValue(${type.simpleName?lower_case}, ID_PROPERTIES_LIST.get(col).getName()));
                }
            }
        );
        return ${type.simpleName?lower_case};
    }


    public ${type.simpleName} merge(${type.simpleName} ${type.simpleName?lower_case}) {
        if (!hasId(${type.simpleName?lower_case})) {
            return insert(${type.simpleName?lower_case});
        } else {
            return update(${type.simpleName?lower_case});
        }
    }


    public ${type.simpleName} getById(<#list type.allIdDetails as pd><#if !pd.nested><#if first??>, <#else><#assign first = false></#if>${pd.type} ${pd.name}</#if></#list>) {
        try {
            return getJdbcTemplate().queryForObject(
                "select " + ALL_COLUMNS + " from " + TABLENAME + " where " + ID_COLUMNS_QUERY, new Object[] {<#assign first = true><#list type.allIdDetails as pd><#if pd.nested || !pd.embedded><#if !first>, <#else><#assign first = false></#if><#if pd.nested>${pd.parentProperty}.${pd.getterName}()<#else>${pd.name}</#if></#if></#list>},
                MAPPER);
        } catch (EmptyResultDataAccessException e) {
            return null;
        }
    }

    public List<${type.simpleName}> findAll() {
        return getJdbcTemplate().query(
                "select " + ALL_COLUMNS + " from " + TABLENAME, new Object[] {},
                MAPPER);
    }

    public static boolean hasId(${type.simpleName} ${type.simpleName?lower_case}) {
        return ID_PROPERTIES_LIST.stream().anyMatch(p->getColumnValue(${type.simpleName?lower_case}, p.getName())!=null);
    }

    public static Object getColumnValue(${type.simpleName} ${type.simpleName?lower_case}, String prop) {
        switch(prop) {
<#list type.properties?values as pd>
            case "${pd.name}": {
<#if pd.nested><#assign parentProperty = type.properties[pd.parentProperty]>
                ${parentProperty.type} parent = (${parentProperty.type})getColumnValue(${type.simpleName?lower_case}, "${parentProperty.name}");
                return parent==null?null:<@appendGetterCall objectParam="parent" propertyDetails=pd />;
<#else>
                return <@appendGetterCall objectParam=type.simpleName?lower_case propertyDetails=pd />;
</#if>
            }
</#list>
            default:
                throw new IllegalArgumentException("Property "+prop+" unknown.");
        }
    }

    public static void setColumnValue(${type.simpleName} ${type.simpleName?lower_case}, String prop, Object value) {
        switch(prop) {
<#list type.properties?values as pd>
            case "${pd.name}": {
<#if pd.nested><#assign parentProperty = type.properties[pd.parentProperty]>
                ${parentProperty.type} parent = (${parentProperty.type})getColumnValue(${type.simpleName?lower_case}, "${parentProperty.name}");
                if (parent==null) {
                    parent = new ${parentProperty.type}();
                    setColumnValue(${type.simpleName?lower_case}, "${parentProperty.name}", parent);
                }
                parent.${pd.setterName}((${pd.type})value);
<#elseif (pd.type.kind.name() == "DECLARED") && entities[pd.type.toString()]??><#assign referenceType = entities[pd.type.toString()] />
                ${pd.type} ${pd.name} = ${type.simpleName?lower_case}.${pd.getterName}();
                if (${pd.name} == null) {
                    ${pd.name} = new ${pd.type}();
                    ${type.simpleName?lower_case}.${pd.setterName}(${pd.name});
                }
                ${referenceType.simpleName}JdbcTemplate.setColumnValue(${pd.name}, "${referenceType.idDetails.name}", value);
<#else>
                ${type.simpleName?lower_case}.${pd.setterName}((${pd.type}) value);
</#if>
                break;
            }
</#list>
            default:
                throw new IllegalArgumentException("Property "+prop+" unknown.");
        }
    }

    public static final class ${type.simpleName}IdRowMapper implements RowMapper<${type.simpleName}> {
<#list type.pureIdColumnDetails as pd>
        private final String ${pd.name?replace('.','_')}ColName;
</#list>
        public ${type.simpleName}IdRowMapper() {
            this(<#list type.pureIdColumnDetails as pd>"${pd.columnName}"<#sep>, </#list>);
        }

        public ${type.simpleName}IdRowMapper(<#list type.pureIdColumnDetails as pd>String ${pd.name?replace('.','_')}ColName<#sep>, </#list>) {
<#list type.pureIdColumnDetails as pd>
            this.${pd.name?replace('.','_')}ColName = ${pd.name?replace('.','_')}ColName;
</#list>
        }

        @Override
        public ${type.simpleName} mapRow(ResultSet rs, int rowNum) throws SQLException {
            final ${type.simpleName} o = new ${type.simpleName}();
<#list type.allIdDetails as pd>
<#if pd.embedded && !pd.nested>
            ${pd.type} ${pd.name} = new ${pd.type}();
            o.${pd.setterName}(${pd.name});
<#elseif pd.embedded && pd.nested>
            ${pd.parentProperty}.${pd.setterName}(<#if pd.jdbcType == 'Object'>(${pd.type})</#if>rs.get${pd.jdbcType}(${pd.name?replace('.','_')}ColName));
<#else>
            o.${pd.setterName}(<#if pd.jdbcType == 'Object'>(${pd.type})</#if>rs.get${pd.jdbcType}(${pd.name?replace('.','_')}ColName));
</#if>
</#list>
            if (hasId(o)) {
                return o;
            } else {
                return null;
            }
        }
    }

    public static final class ${type.simpleName}RowMapper implements RowMapper<${type.simpleName}> {
        private final String columnPrefix;
<#list type.properties?values as pd><#if !pd.embedded || pd.nested>
        private final String ${pd.name?replace('.','_')}ColName;
</#if></#list>

        public ${type.simpleName}RowMapper() {
            this("");
        }

        public ${type.simpleName}RowMapper(String columnPrefix) {
            this.columnPrefix = columnPrefix;
<#list type.properties?values as pd><#if !pd.embedded || pd.nested>
            ${pd.name?replace('.','_')}ColName = columnPrefix + "${pd.columnName}";
</#if></#list>
        }

        @Override
        public ${type.simpleName} mapRow(ResultSet rs, int rowNum) throws SQLException {
             final ${type.simpleName} o = new ${type.simpleName}();

<#list type.properties?values as pd><#if pd.embedded && !pd.nested>
            ${pd.type} ${pd.name} = new ${pd.type}();
            o.${pd.setterName}(${pd.name});
<#else>
            <#if pd.embedded && pd.nested>${pd.parentProperty}<#else>o</#if>.${pd.setterName}(<#if pd.propertyType.name() == "MANY_TO_ONE">${pd.referenceType.simpleName?upper_case}_ID_MAPPER.mapRow(rs,rowNum));<#else><#if pd.jdbcType == 'Object'>(${pd.type})</#if>rs.get${pd.jdbcType}(${pd.name?replace('.','_')}ColName));</#if>
</#if></#list>
             return o;
        }

        public String getColumnPrefix() {
            return columnPrefix;
        }
    }
}
